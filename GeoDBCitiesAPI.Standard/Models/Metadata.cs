// <copyright file="Metadata.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// Metadata.
    /// </summary>
    public class Metadata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata"/> class.
        /// </summary>
        public Metadata()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata"/> class.
        /// </summary>
        /// <param name="currentOffset">currentOffset.</param>
        /// <param name="totalCount">totalCount.</param>
        public Metadata(
            long? currentOffset = null,
            long? totalCount = null)
        {
            this.CurrentOffset = currentOffset;
            this.TotalCount = totalCount;
        }

        /// <summary>
        /// The zero-ary offset into the results (0 is the first result)
        /// </summary>
        [JsonProperty("currentOffset", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentOffset { get; set; }

        /// <summary>
        /// The total number of results across pages
        /// </summary>
        [JsonProperty("totalCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Metadata : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Metadata other &&
                (this.CurrentOffset == null && other.CurrentOffset == null ||
                 this.CurrentOffset?.Equals(other.CurrentOffset) == true) &&
                (this.TotalCount == null && other.TotalCount == null ||
                 this.TotalCount?.Equals(other.TotalCount) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"CurrentOffset = {(this.CurrentOffset == null ? "null" : this.CurrentOffset.ToString())}");
            toStringOutput.Add($"TotalCount = {(this.TotalCount == null ? "null" : this.TotalCount.ToString())}");
        }
    }
}