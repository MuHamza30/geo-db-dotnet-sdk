// <copyright file="TimeResponse.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// TimeResponse.
    /// </summary>
    public class TimeResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeResponse"/> class.
        /// </summary>
        public TimeResponse()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeResponse"/> class.
        /// </summary>
        /// <param name="errors">errors.</param>
        /// <param name="data">data.</param>
        public TimeResponse(
            List<Models.Error> errors = null,
            string data = null)
        {
            this.Errors = errors;
            this.Data = data;
        }

        /// <summary>
        /// Gets or sets Errors.
        /// </summary>
        [JsonProperty("errors", NullValueHandling = NullValueHandling.Ignore)]
        public List<Models.Error> Errors { get; set; }

        /// <summary>
        /// The time in ISO-8601 format: HHmmss.SSSZ
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"TimeResponse : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is TimeResponse other &&
                (this.Errors == null && other.Errors == null ||
                 this.Errors?.Equals(other.Errors) == true) &&
                (this.Data == null && other.Data == null ||
                 this.Data?.Equals(other.Data) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Errors = {(this.Errors == null ? "null" : $"[{string.Join(", ", this.Errors)} ]")}");
            toStringOutput.Add($"Data = {this.Data ?? "null"}");
        }
    }
}