// <copyright file="CountrySummary.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// CountrySummary.
    /// </summary>
    public class CountrySummary
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySummary"/> class.
        /// </summary>
        public CountrySummary()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySummary"/> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="currencyCodes">currencyCodes.</param>
        /// <param name="name">name.</param>
        /// <param name="wikiDataId">wikiDataId.</param>
        public CountrySummary(
            string code = null,
            List<string> currencyCodes = null,
            string name = null,
            string wikiDataId = null)
        {
            this.Code = code;
            this.CurrencyCodes = currencyCodes;
            this.Name = name;
            this.WikiDataId = wikiDataId;
        }

        /// <summary>
        /// The ISO-3166 country code
        /// </summary>
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// A list of supported ISO-4217 currency codes
        /// </summary>
        [JsonProperty("currencyCodes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CurrencyCodes { get; set; }

        /// <summary>
        /// The country name (varies by languageCode)
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The country WikiData id
        /// </summary>
        [JsonProperty("wikiDataId", NullValueHandling = NullValueHandling.Ignore)]
        public string WikiDataId { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"CountrySummary : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is CountrySummary other &&
                (this.Code == null && other.Code == null ||
                 this.Code?.Equals(other.Code) == true) &&
                (this.CurrencyCodes == null && other.CurrencyCodes == null ||
                 this.CurrencyCodes?.Equals(other.CurrencyCodes) == true) &&
                (this.Name == null && other.Name == null ||
                 this.Name?.Equals(other.Name) == true) &&
                (this.WikiDataId == null && other.WikiDataId == null ||
                 this.WikiDataId?.Equals(other.WikiDataId) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Code = {this.Code ?? "null"}");
            toStringOutput.Add($"CurrencyCodes = {(this.CurrencyCodes == null ? "null" : $"[{string.Join(", ", this.CurrencyCodes)} ]")}");
            toStringOutput.Add($"Name = {this.Name ?? "null"}");
            toStringOutput.Add($"WikiDataId = {this.WikiDataId ?? "null"}");
        }
    }
}