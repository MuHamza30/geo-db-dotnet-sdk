// <copyright file="CountryRegionDetails.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// CountryRegionDetails.
    /// </summary>
    public class CountryRegionDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRegionDetails"/> class.
        /// </summary>
        public CountryRegionDetails()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRegionDetails"/> class.
        /// </summary>
        /// <param name="capital">capital.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="fipsCode">fipsCode.</param>
        /// <param name="isoCode">isoCode.</param>
        /// <param name="name">name.</param>
        /// <param name="numCities">numCities.</param>
        /// <param name="wikiDataId">wikiDataId.</param>
        public CountryRegionDetails(
            string capital = null,
            string countryCode = null,
            string fipsCode = null,
            string isoCode = null,
            string name = null,
            int? numCities = null,
            string wikiDataId = null)
        {
            this.Capital = capital;
            this.CountryCode = countryCode;
            this.FipsCode = fipsCode;
            this.IsoCode = isoCode;
            this.Name = name;
            this.NumCities = numCities;
            this.WikiDataId = wikiDataId;
        }

        /// <summary>
        /// The region's capital city (varies by languageCode)
        /// </summary>
        [JsonProperty("capital", NullValueHandling = NullValueHandling.Ignore)]
        public string Capital { get; set; }

        /// <summary>
        /// An ISO-3166 country code
        /// </summary>
        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The FIPS 10-4 region code
        /// </summary>
        [JsonProperty("fipsCode", NullValueHandling = NullValueHandling.Ignore)]
        public string FipsCode { get; set; }

        /// <summary>
        /// The ISO region code
        /// </summary>
        [JsonProperty("isoCode", NullValueHandling = NullValueHandling.Ignore)]
        public string IsoCode { get; set; }

        /// <summary>
        /// The region name (varies by languageCode)
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of cities in this region
        /// </summary>
        [JsonProperty("numCities", NullValueHandling = NullValueHandling.Ignore)]
        public int? NumCities { get; set; }

        /// <summary>
        /// The region WikiData id
        /// </summary>
        [JsonProperty("wikiDataId", NullValueHandling = NullValueHandling.Ignore)]
        public string WikiDataId { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"CountryRegionDetails : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is CountryRegionDetails other &&
                (this.Capital == null && other.Capital == null ||
                 this.Capital?.Equals(other.Capital) == true) &&
                (this.CountryCode == null && other.CountryCode == null ||
                 this.CountryCode?.Equals(other.CountryCode) == true) &&
                (this.FipsCode == null && other.FipsCode == null ||
                 this.FipsCode?.Equals(other.FipsCode) == true) &&
                (this.IsoCode == null && other.IsoCode == null ||
                 this.IsoCode?.Equals(other.IsoCode) == true) &&
                (this.Name == null && other.Name == null ||
                 this.Name?.Equals(other.Name) == true) &&
                (this.NumCities == null && other.NumCities == null ||
                 this.NumCities?.Equals(other.NumCities) == true) &&
                (this.WikiDataId == null && other.WikiDataId == null ||
                 this.WikiDataId?.Equals(other.WikiDataId) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Capital = {this.Capital ?? "null"}");
            toStringOutput.Add($"CountryCode = {this.CountryCode ?? "null"}");
            toStringOutput.Add($"FipsCode = {this.FipsCode ?? "null"}");
            toStringOutput.Add($"IsoCode = {this.IsoCode ?? "null"}");
            toStringOutput.Add($"Name = {this.Name ?? "null"}");
            toStringOutput.Add($"NumCities = {(this.NumCities == null ? "null" : this.NumCities.ToString())}");
            toStringOutput.Add($"WikiDataId = {this.WikiDataId ?? "null"}");
        }
    }
}