// <copyright file="PopulatedPlaceDetails.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// PopulatedPlaceDetails.
    /// </summary>
    public class PopulatedPlaceDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PopulatedPlaceDetails"/> class.
        /// </summary>
        public PopulatedPlaceDetails()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PopulatedPlaceDetails"/> class.
        /// </summary>
        /// <param name="country">country.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="elevationMeters">elevationMeters.</param>
        /// <param name="id">id.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="name">name.</param>
        /// <param name="population">population.</param>
        /// <param name="region">region.</param>
        /// <param name="regionCode">regionCode.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="type">type.</param>
        /// <param name="wikiDataId">wikiDataId.</param>
        public PopulatedPlaceDetails(
            string country = null,
            string countryCode = null,
            bool? deleted = null,
            int? elevationMeters = null,
            int? id = null,
            double? latitude = null,
            double? longitude = null,
            string name = null,
            int? population = null,
            string region = null,
            string regionCode = null,
            string timezone = null,
            Models.PopulatedPlaceTypeEnum? type = null,
            string wikiDataId = null)
        {
            this.Country = country;
            this.CountryCode = countryCode;
            this.Deleted = deleted;
            this.ElevationMeters = elevationMeters;
            this.Id = id;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Name = name;
            this.Population = population;
            this.Region = region;
            this.RegionCode = regionCode;
            this.Timezone = timezone;
            this.Type = type;
            this.WikiDataId = wikiDataId;
        }

        /// <summary>
        /// The country name (varies by languageCode)
        /// </summary>
        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The ISO-3166 country code
        /// </summary>
        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// If this place has been soft-deleted
        /// </summary>
        [JsonProperty("deleted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// The place elevation (meters) above sea level
        /// </summary>
        [JsonProperty("elevationMeters", NullValueHandling = NullValueHandling.Ignore)]
        public int? ElevationMeters { get; set; }

        /// <summary>
        /// The place GeoDB native id
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// The place latittude (-90.0 to 90.0)
        /// </summary>
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The place longitude (-180.0 to 180.0)
        /// </summary>
        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        /// <summary>
        /// The place name (varies by languageCode)
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The place population
        /// </summary>
        [JsonProperty("population", NullValueHandling = NullValueHandling.Ignore)]
        public int? Population { get; set; }

        /// <summary>
        /// The region name (varies by languageCode)
        /// </summary>
        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// The ISO or FIPS region code
        /// </summary>
        [JsonProperty("regionCode", NullValueHandling = NullValueHandling.Ignore)]
        public string RegionCode { get; set; }

        /// <summary>
        /// The place timezone id
        /// </summary>
        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        /// <summary>
        /// One of a set of enumerated populated-place types known by the service (currently only level-2 admin divisions and
        /// cities)
        /// </summary>
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Models.PopulatedPlaceTypeEnum? Type { get; set; }

        /// <summary>
        /// The place WikiData id
        /// </summary>
        [JsonProperty("wikiDataId", NullValueHandling = NullValueHandling.Ignore)]
        public string WikiDataId { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"PopulatedPlaceDetails : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is PopulatedPlaceDetails other &&
                (this.Country == null && other.Country == null ||
                 this.Country?.Equals(other.Country) == true) &&
                (this.CountryCode == null && other.CountryCode == null ||
                 this.CountryCode?.Equals(other.CountryCode) == true) &&
                (this.Deleted == null && other.Deleted == null ||
                 this.Deleted?.Equals(other.Deleted) == true) &&
                (this.ElevationMeters == null && other.ElevationMeters == null ||
                 this.ElevationMeters?.Equals(other.ElevationMeters) == true) &&
                (this.Id == null && other.Id == null ||
                 this.Id?.Equals(other.Id) == true) &&
                (this.Latitude == null && other.Latitude == null ||
                 this.Latitude?.Equals(other.Latitude) == true) &&
                (this.Longitude == null && other.Longitude == null ||
                 this.Longitude?.Equals(other.Longitude) == true) &&
                (this.Name == null && other.Name == null ||
                 this.Name?.Equals(other.Name) == true) &&
                (this.Population == null && other.Population == null ||
                 this.Population?.Equals(other.Population) == true) &&
                (this.Region == null && other.Region == null ||
                 this.Region?.Equals(other.Region) == true) &&
                (this.RegionCode == null && other.RegionCode == null ||
                 this.RegionCode?.Equals(other.RegionCode) == true) &&
                (this.Timezone == null && other.Timezone == null ||
                 this.Timezone?.Equals(other.Timezone) == true) &&
                (this.Type == null && other.Type == null ||
                 this.Type?.Equals(other.Type) == true) &&
                (this.WikiDataId == null && other.WikiDataId == null ||
                 this.WikiDataId?.Equals(other.WikiDataId) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Country = {this.Country ?? "null"}");
            toStringOutput.Add($"CountryCode = {this.CountryCode ?? "null"}");
            toStringOutput.Add($"Deleted = {(this.Deleted == null ? "null" : this.Deleted.ToString())}");
            toStringOutput.Add($"ElevationMeters = {(this.ElevationMeters == null ? "null" : this.ElevationMeters.ToString())}");
            toStringOutput.Add($"Id = {(this.Id == null ? "null" : this.Id.ToString())}");
            toStringOutput.Add($"Latitude = {(this.Latitude == null ? "null" : this.Latitude.ToString())}");
            toStringOutput.Add($"Longitude = {(this.Longitude == null ? "null" : this.Longitude.ToString())}");
            toStringOutput.Add($"Name = {this.Name ?? "null"}");
            toStringOutput.Add($"Population = {(this.Population == null ? "null" : this.Population.ToString())}");
            toStringOutput.Add($"Region = {this.Region ?? "null"}");
            toStringOutput.Add($"RegionCode = {this.RegionCode ?? "null"}");
            toStringOutput.Add($"Timezone = {this.Timezone ?? "null"}");
            toStringOutput.Add($"Type = {(this.Type == null ? "null" : this.Type.ToString())}");
            toStringOutput.Add($"WikiDataId = {this.WikiDataId ?? "null"}");
        }
    }
}