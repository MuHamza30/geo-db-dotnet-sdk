// <copyright file="BaseCollectionResponse.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// BaseCollectionResponse.
    /// </summary>
    public class BaseCollectionResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseCollectionResponse"/> class.
        /// </summary>
        public BaseCollectionResponse()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseCollectionResponse"/> class.
        /// </summary>
        /// <param name="errors">errors.</param>
        /// <param name="links">links.</param>
        /// <param name="metadata">metadata.</param>
        public BaseCollectionResponse(
            List<Models.Error> errors = null,
            List<Models.Link> links = null,
            Models.Metadata metadata = null)
        {
            this.Errors = errors;
            this.Links = links;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or sets Errors.
        /// </summary>
        [JsonProperty("errors", NullValueHandling = NullValueHandling.Ignore)]
        public List<Models.Error> Errors { get; set; }

        /// <summary>
        /// Gets or sets Links.
        /// </summary>
        [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
        public List<Models.Link> Links { get; set; }

        /// <summary>
        /// Result metadata (currently only associated with collection results)
        /// </summary>
        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Metadata Metadata { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"BaseCollectionResponse : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is BaseCollectionResponse other &&
                (this.Errors == null && other.Errors == null ||
                 this.Errors?.Equals(other.Errors) == true) &&
                (this.Links == null && other.Links == null ||
                 this.Links?.Equals(other.Links) == true) &&
                (this.Metadata == null && other.Metadata == null ||
                 this.Metadata?.Equals(other.Metadata) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Errors = {(this.Errors == null ? "null" : $"[{string.Join(", ", this.Errors)} ]")}");
            toStringOutput.Add($"Links = {(this.Links == null ? "null" : $"[{string.Join(", ", this.Links)} ]")}");
            toStringOutput.Add($"Metadata = {(this.Metadata == null ? "null" : this.Metadata.ToString())}");
        }
    }
}