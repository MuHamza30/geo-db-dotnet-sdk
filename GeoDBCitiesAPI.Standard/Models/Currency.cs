// <copyright file="Currency.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace GeoDBCitiesAPI.Standard.Models
{
    /// <summary>
    /// Currency.
    /// </summary>
    public class Currency
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency"/> class.
        /// </summary>
        public Currency()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Currency"/> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="countryCodes">countryCodes.</param>
        /// <param name="symbol">symbol.</param>
        public Currency(
            string code = null,
            List<string> countryCodes = null,
            string symbol = null)
        {
            this.Code = code;
            this.CountryCodes = countryCodes;
            this.Symbol = symbol;
        }

        /// <summary>
        /// The ISO-4217 currency code
        /// </summary>
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// A list of ISO-3166 country codes of countries supporting this currency
        /// </summary>
        [JsonProperty("countryCodes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CountryCodes { get; set; }

        /// <summary>
        /// The currency symbol
        /// </summary>
        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Currency : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Currency other &&
                (this.Code == null && other.Code == null ||
                 this.Code?.Equals(other.Code) == true) &&
                (this.CountryCodes == null && other.CountryCodes == null ||
                 this.CountryCodes?.Equals(other.CountryCodes) == true) &&
                (this.Symbol == null && other.Symbol == null ||
                 this.Symbol?.Equals(other.Symbol) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Code = {this.Code ?? "null"}");
            toStringOutput.Add($"CountryCodes = {(this.CountryCodes == null ? "null" : $"[{string.Join(", ", this.CountryCodes)} ]")}");
            toStringOutput.Add($"Symbol = {this.Symbol ?? "null"}");
        }
    }
}