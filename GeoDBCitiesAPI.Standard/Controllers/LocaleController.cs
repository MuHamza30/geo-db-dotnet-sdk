// <copyright file="LocaleController.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Exceptions;
using GeoDBCitiesAPI.Standard.Http.Client;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace GeoDBCitiesAPI.Standard.Controllers
{
    /// <summary>
    /// LocaleController.
    /// </summary>
    public class LocaleController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocaleController"/> class.
        /// </summary>
        internal LocaleController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
        /// </summary>
        /// <param name="countryId">Required parameter: Currencies for this country id.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <returns>Returns the Models.CurrenciesResponse response from the API call.</returns>
        public Models.CurrenciesResponse GetCurrenciesUsingGET(
                string countryId,
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0)
            => CoreHelper.RunTask(GetCurrenciesUsingGETAsync(countryId, hateoasMode, limit, offset));

        /// <summary>
        /// Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
        /// </summary>
        /// <param name="countryId">Required parameter: Currencies for this country id.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CurrenciesResponse response from the API call.</returns>
        public async Task<Models.CurrenciesResponse> GetCurrenciesUsingGETAsync(
                string countryId,
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CurrenciesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/currencies")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Query(_query => _query.Setup("countryId", countryId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get all supported languages.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <returns>Returns the Models.LanguagesResponse response from the API call.</returns>
        public Models.LanguagesResponse GetLanguagesUsingGET(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0)
            => CoreHelper.RunTask(GetLanguagesUsingGETAsync(hateoasMode, limit, offset));

        /// <summary>
        /// Get all supported languages.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.LanguagesResponse response from the API call.</returns>
        public async Task<Models.LanguagesResponse> GetLanguagesUsingGETAsync(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.LanguagesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/languages")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get all known locales.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <returns>Returns the Models.LocalesResponse response from the API call.</returns>
        public Models.LocalesResponse GetLocalesUsingGET(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0)
            => CoreHelper.RunTask(GetLocalesUsingGETAsync(hateoasMode, limit, offset));

        /// <summary>
        /// Get all known locales.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.LocalesResponse response from the API call.</returns>
        public async Task<Models.LocalesResponse> GetLocalesUsingGETAsync(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.LocalesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/locales")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get all known time-zones.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <returns>Returns the Models.TimeZonesResponse response from the API call.</returns>
        public Models.TimeZonesResponse GetTimezonesUsingGET(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0)
            => CoreHelper.RunTask(GetTimezonesUsingGETAsync(hateoasMode, limit, offset));

        /// <summary>
        /// Get all known time-zones.
        /// </summary>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.TimeZonesResponse response from the API call.</returns>
        public async Task<Models.TimeZonesResponse> GetTimezonesUsingGETAsync(
                bool? hateoasMode = true,
                int? limit = 10,
                int? offset = 0,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.TimeZonesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/timezones")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get time-zone.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <returns>Returns the Models.TimeZoneResponse response from the API call.</returns>
        public Models.TimeZoneResponse GetTimeZoneUsingGET(
                string zoneId)
            => CoreHelper.RunTask(GetTimeZoneUsingGETAsync(zoneId));

        /// <summary>
        /// Get time-zone.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.TimeZoneResponse response from the API call.</returns>
        public async Task<Models.TimeZoneResponse> GetTimeZoneUsingGETAsync(
                string zoneId,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.TimeZoneResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/timezones/{zoneId}")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("zoneId", zoneId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get time-zone date-time.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <returns>Returns the Models.DateTimeResponse response from the API call.</returns>
        public Models.DateTimeResponse GetTimeZoneDateTimeUsingGET(
                string zoneId)
            => CoreHelper.RunTask(GetTimeZoneDateTimeUsingGETAsync(zoneId));

        /// <summary>
        /// Get time-zone date-time.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.DateTimeResponse response from the API call.</returns>
        public async Task<Models.DateTimeResponse> GetTimeZoneDateTimeUsingGETAsync(
                string zoneId,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.DateTimeResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/timezones/{zoneId}/dateTime")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("zoneId", zoneId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get time-zone time.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <returns>Returns the Models.TimeResponse response from the API call.</returns>
        public Models.TimeResponse GetTimeZoneTimeUsingGET(
                string zoneId)
            => CoreHelper.RunTask(GetTimeZoneTimeUsingGETAsync(zoneId));

        /// <summary>
        /// Get time-zone time.
        /// </summary>
        /// <param name="zoneId">Required parameter: A time-zone id.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.TimeResponse response from the API call.</returns>
        public async Task<Models.TimeResponse> GetTimeZoneTimeUsingGETAsync(
                string zoneId,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.TimeResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/locale/timezones/{zoneId}/time")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("zoneId", zoneId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}