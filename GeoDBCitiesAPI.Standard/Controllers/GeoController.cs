// <copyright file="GeoController.cs" company="APIMatic">
// GeoDBCitiesAPI.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using GeoDBCitiesAPI.Standard;
using GeoDBCitiesAPI.Standard.Exceptions;
using GeoDBCitiesAPI.Standard.Http.Client;
using GeoDBCitiesAPI.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace GeoDBCitiesAPI.Standard.Controllers
{
    /// <summary>
    /// GeoController.
    /// </summary>
    public class GeoController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoController"/> class.
        /// </summary>
        internal GeoController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all.
        /// known divisions.
        /// </summary>
        /// <param name="location">Optional parameter: Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindAdminDivisionsUsingGET(
                string location = null,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindAdminDivisionsUsingGETAsync(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all.
        /// known divisions.
        /// </summary>
        /// <param name="location">Optional parameter: Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindAdminDivisionsUsingGETAsync(
                string location = null,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/adminDivisions")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("location", location))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the details for a specific administrative division, including location coordinates, population, and.
        /// elevation above sea-level (if available).
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public Models.PopulatedPlaceResponse GetAdminDivisionUsingGET(
                string divisionId,
                bool? asciiMode = false,
                string languageCode = null)
            => CoreHelper.RunTask(GetAdminDivisionUsingGETAsync(divisionId, asciiMode, languageCode));

        /// <summary>
        /// Get the details for a specific administrative division, including location coordinates, population, and.
        /// elevation above sea-level (if available).
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlaceResponse> GetAdminDivisionUsingGETAsync(
                string divisionId,
                bool? asciiMode = false,
                string languageCode = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlaceResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/adminDivisions/{divisionId}")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("divisionId", divisionId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("languageCode", languageCode))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you.
        /// will get back all known cities.
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindCitiesNearAdminDivisionUsingGET(
                string divisionId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindCitiesNearAdminDivisionUsingGETAsync(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you.
        /// will get back all known cities.
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindCitiesNearAdminDivisionUsingGETAsync(
                string divisionId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/adminDivisions/{divisionId}/nearbyCities")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("divisionId", divisionId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("types", types))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria.
        /// are set, you will get back all known divisions.
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindDivisionsNearAdminDivisionUsingGET(
                string divisionId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindDivisionsNearAdminDivisionUsingGETAsync(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria.
        /// are set, you will get back all known divisions.
        /// </summary>
        /// <param name="divisionId">Required parameter: An admin-division id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindDivisionsNearAdminDivisionUsingGETAsync(
                string divisionId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/adminDivisions/{divisionId}/nearbyDivisions")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("divisionId", divisionId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities.
        /// </summary>
        /// <param name="location">Optional parameter: Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindCitiesUsingGET(
                string location = null,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindCitiesUsingGETAsync(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities.
        /// </summary>
        /// <param name="location">Optional parameter: Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindCitiesUsingGETAsync(
                string location = null,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("location", location))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("types", types))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the details for a specific city, including location coordinates, population, and elevation above sea-level.
        /// (if available).
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public Models.PopulatedPlaceResponse GetCityUsingGET(
                string cityId,
                bool? asciiMode = false,
                string languageCode = null)
            => CoreHelper.RunTask(GetCityUsingGETAsync(cityId, asciiMode, languageCode));

        /// <summary>
        /// Get the details for a specific city, including location coordinates, population, and elevation above sea-level.
        /// (if available).
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlaceResponse> GetCityUsingGETAsync(
                string cityId,
                bool? asciiMode = false,
                string languageCode = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlaceResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("languageCode", languageCode))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get city date-time.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <returns>Returns the Models.DateTimeResponse response from the API call.</returns>
        public Models.DateTimeResponse GetCityDateTimeUsingGET(
                string cityId)
            => CoreHelper.RunTask(GetCityDateTimeUsingGETAsync(cityId));

        /// <summary>
        /// Get city date-time.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.DateTimeResponse response from the API call.</returns>
        public async Task<Models.DateTimeResponse> GetCityDateTimeUsingGETAsync(
                string cityId,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.DateTimeResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}/dateTime")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get distance from the given city.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="toCityId">Required parameter: Distance to this city.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <returns>Returns the Models.DistanceResponse response from the API call.</returns>
        public Models.DistanceResponse GetCityDistanceUsingGET(
                string cityId,
                string toCityId,
                string distanceUnit = "MI")
            => CoreHelper.RunTask(GetCityDistanceUsingGETAsync(cityId, toCityId, distanceUnit));

        /// <summary>
        /// Get distance from the given city.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="toCityId">Required parameter: Distance to this city.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.DistanceResponse response from the API call.</returns>
        public async Task<Models.DistanceResponse> GetCityDistanceUsingGETAsync(
                string cityId,
                string toCityId,
                string distanceUnit = "MI",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.DistanceResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}/distance")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Query(_query => _query.Setup("toCityId", toCityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level.
        /// (if available).
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public Models.PopulatedPlaceResponse GetCityLocatedInUsingGET(
                string cityId,
                bool? asciiMode = false,
                string languageCode = null)
            => CoreHelper.RunTask(GetCityLocatedInUsingGETAsync(cityId, asciiMode, languageCode));

        /// <summary>
        /// Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level.
        /// (if available).
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlaceResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlaceResponse> GetCityLocatedInUsingGETAsync(
                string cityId,
                bool? asciiMode = false,
                string languageCode = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlaceResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}/locatedIn")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("languageCode", languageCode))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get.
        /// back all known cities.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindCitiesNearCityUsingGET(
                string cityId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindCitiesNearCityUsingGETAsync(cityId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get.
        /// back all known cities.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindCitiesNearCityUsingGETAsync(
                string cityId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}/nearbyCities")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("types", types))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get city time.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <returns>Returns the Models.TimeResponse response from the API call.</returns>
        public Models.TimeResponse GetCityTimeUsingGET(
                string cityId)
            => CoreHelper.RunTask(GetCityTimeUsingGETAsync(cityId));

        /// <summary>
        /// Get city time.
        /// </summary>
        /// <param name="cityId">Required parameter: A city id (either native 'id' or 'wikiDataId').</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.TimeResponse response from the API call.</returns>
        public async Task<Models.TimeResponse> GetCityTimeUsingGETAsync(
                string cityId,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.TimeResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/cities/{cityId}/time")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("cityId", cityId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries.
        /// </summary>
        /// <param name="currencyCode">Optional parameter: Only countries supporting this currency.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name.</param>
        /// <returns>Returns the Models.CountriesResponse response from the API call.</returns>
        public Models.CountriesResponse GetCountriesUsingGET(
                string currencyCode = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null)
            => CoreHelper.RunTask(GetCountriesUsingGETAsync(currencyCode, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort));

        /// <summary>
        /// Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries.
        /// </summary>
        /// <param name="currencyCode">Optional parameter: Only countries supporting this currency.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CountriesResponse response from the API call.</returns>
        public async Task<Models.CountriesResponse> GetCountriesUsingGETAsync(
                string currencyCode = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CountriesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("currencyCode", currencyCode))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the details for a specific country, including number of regions.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <returns>Returns the Models.CountryResponse response from the API call.</returns>
        public Models.CountryResponse GetCountryUsingGET(
                string countryId,
                bool? asciiMode = false,
                string languageCode = null)
            => CoreHelper.RunTask(GetCountryUsingGETAsync(countryId, asciiMode, languageCode));

        /// <summary>
        /// Get the details for a specific country, including number of regions.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CountryResponse response from the API call.</returns>
        public async Task<Models.CountryResponse> GetCountryUsingGETAsync(
                string countryId,
                bool? asciiMode = false,
                string languageCode = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CountryResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries/{countryId}")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("countryId", countryId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("languageCode", languageCode))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get all regions in a specific country. These could be states, provinces, districts, or otherwise major.
        /// political divisions.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name.</param>
        /// <returns>Returns the Models.CountryRegionsResponse response from the API call.</returns>
        public Models.CountryRegionsResponse GetRegionsUsingGET(
                string countryId,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null)
            => CoreHelper.RunTask(GetRegionsUsingGETAsync(countryId, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort));

        /// <summary>
        /// Get all regions in a specific country. These could be states, provinces, districts, or otherwise major.
        /// political divisions.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CountryRegionsResponse response from the API call.</returns>
        public async Task<Models.CountryRegionsResponse> GetRegionsUsingGETAsync(
                string countryId,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CountryRegionsResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries/{countryId}/regions")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("countryId", countryId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the details of a specific country region, including number of cities.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <returns>Returns the Models.CountryRegionResponse response from the API call.</returns>
        public Models.CountryRegionResponse GetRegionUsingGET(
                string countryId,
                string regionCode,
                bool? asciiMode = false,
                string languageCode = null)
            => CoreHelper.RunTask(GetRegionUsingGETAsync(countryId, regionCode, asciiMode, languageCode));

        /// <summary>
        /// Get the details of a specific country region, including number of cities.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CountryRegionResponse response from the API call.</returns>
        public async Task<Models.CountryRegionResponse> GetRegionUsingGETAsync(
                string countryId,
                string regionCode,
                bool? asciiMode = false,
                string languageCode = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CountryRegionResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries/{countryId}/regions/{regionCode}")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("countryId", countryId))
                      .Template(_template => _template.Setup("regionCode", regionCode))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("languageCode", languageCode))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the administrative divisions in a specific country region. The country and region info is omitted in the.
        /// response.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindRegionDivisionsUsingGET(
                string countryId,
                string regionCode,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindRegionDivisionsUsingGETAsync(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Get the administrative divisions in a specific country region. The country and region info is omitted in the.
        /// response.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindRegionDivisionsUsingGETAsync(
                string countryId,
                string regionCode,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries/{countryId}/regions/{regionCode}/adminDivisions")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("countryId", countryId))
                      .Template(_template => _template.Setup("regionCode", regionCode))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Get the cities in a specific country region. The country and region info is omitted in the response.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindRegionCitiesUsingGET(
                string countryId,
                string regionCode,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindRegionCitiesUsingGETAsync(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Get the cities in a specific country region. The country and region info is omitted in the response.
        /// </summary>
        /// <param name="countryId">Required parameter: An ISO-3166 country code or WikiData id.</param>
        /// <param name="regionCode">Required parameter: An ISO-3166 or FIPS region code.</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindRegionCitiesUsingGETAsync(
                string countryId,
                string regionCode,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/countries/{countryId}/regions/{regionCode}/cities")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("countryId", countryId))
                      .Template(_template => _template.Setup("regionCode", regionCode))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("types", types))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("404", CreateErrorCase("404 - Not Found", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back.
        /// all known cities.
        /// </summary>
        /// <param name="locationId">Required parameter: A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindCitiesNearLocationUsingGET(
                string locationId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindCitiesNearLocationUsingGETAsync(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back.
        /// all known cities.
        /// </summary>
        /// <param name="locationId">Required parameter: A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="types">Optional parameter: Only places for these types (comma-delimited): CITY | ADM2.</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindCitiesNearLocationUsingGETAsync(
                string locationId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                string types = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/locations/{locationId}/nearbyCities")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("locationId", locationId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("types", types))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);

        /// <summary>
        /// Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set,.
        /// you will get back all known divisions.
        /// </summary>
        /// <param name="locationId">Required parameter: A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public Models.PopulatedPlacesResponse FindDivisionsNearLocationUsingGET(
                string locationId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE")
            => CoreHelper.RunTask(FindDivisionsNearLocationUsingGETAsync(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted));

        /// <summary>
        /// Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set,.
        /// you will get back all known divisions.
        /// </summary>
        /// <param name="locationId">Required parameter: A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD.</param>
        /// <param name="radius">Optional parameter: The location radius within which to find places.</param>
        /// <param name="distanceUnit">Optional parameter: The unit of distance: MI | KM.</param>
        /// <param name="countryIds">Optional parameter: Only places in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="excludedCountryIds">Optional parameter: Only places NOT in these countries (comma-delimited country codes or WikiData ids).</param>
        /// <param name="minPopulation">Optional parameter: Only places having at least this population.</param>
        /// <param name="maxPopulation">Optional parameter: Only places having no more than this population.</param>
        /// <param name="namePrefix">Optional parameter: Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language..</param>
        /// <param name="namePrefixDefaultLangResults">Optional parameter: When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set..</param>
        /// <param name="timeZoneIds">Optional parameter: Only places in these time-zones (comma-delimited).</param>
        /// <param name="asciiMode">Optional parameter: Display results using ASCII characters.</param>
        /// <param name="hateoasMode">Optional parameter: Include HATEOAS-style links in results.</param>
        /// <param name="languageCode">Optional parameter: Display results in this language.</param>
        /// <param name="limit">Optional parameter: The maximum number of results to retrieve.</param>
        /// <param name="offset">Optional parameter: The zero-ary offset index into the results.</param>
        /// <param name="sort">Optional parameter: How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population.</param>
        /// <param name="includeDeleted">Optional parameter: Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.PopulatedPlacesResponse response from the API call.</returns>
        public async Task<Models.PopulatedPlacesResponse> FindDivisionsNearLocationUsingGETAsync(
                string locationId,
                int? radius = null,
                string distanceUnit = "MI",
                string countryIds = null,
                string excludedCountryIds = null,
                int? minPopulation = null,
                int? maxPopulation = null,
                string namePrefix = null,
                bool? namePrefixDefaultLangResults = true,
                string timeZoneIds = null,
                bool? asciiMode = false,
                bool? hateoasMode = true,
                string languageCode = null,
                int? limit = 10,
                int? offset = 0,
                string sort = null,
                string includeDeleted = "NONE",
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.PopulatedPlacesResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/geo/locations/{locationId}/nearbyDivisions")
                  .WithAuth("UserSecurity")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("locationId", locationId))
                      .Header(_header => _header.Setup("Content-Type", "application/json"))
                      .Query(_query => _query.Setup("radius", radius))
                      .Query(_query => _query.Setup("distanceUnit", distanceUnit ?? "MI"))
                      .Query(_query => _query.Setup("countryIds", countryIds))
                      .Query(_query => _query.Setup("excludedCountryIds", excludedCountryIds))
                      .Query(_query => _query.Setup("minPopulation", minPopulation))
                      .Query(_query => _query.Setup("maxPopulation", maxPopulation))
                      .Query(_query => _query.Setup("namePrefix", namePrefix))
                      .Query(_query => _query.Setup("namePrefixDefaultLangResults", namePrefixDefaultLangResults ?? true))
                      .Query(_query => _query.Setup("timeZoneIds", timeZoneIds))
                      .Query(_query => _query.Setup("asciiMode", asciiMode ?? false))
                      .Query(_query => _query.Setup("hateoasMode", hateoasMode ?? true))
                      .Query(_query => _query.Setup("languageCode", languageCode))
                      .Query(_query => _query.Setup("limit", limit ?? 10))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("sort", sort))
                      .Query(_query => _query.Setup("includeDeleted", includeDeleted ?? "NONE"))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("400 - Bad Request", (_reason, _context) => new BaseResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("401 - Unauthorized", (_reason, _context) => new ApiException(_reason, _context)))
                  .ErrorCase("403", CreateErrorCase("403 - Forbidden", (_reason, _context) => new BaseResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}